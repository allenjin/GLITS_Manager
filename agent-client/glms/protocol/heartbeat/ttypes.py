#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ProcessStatus:
  """
  Attributes:
   - id
   - name
   - status
   - pid
   - cpu_percent
   - mem_percent
   - run_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'status', None, None, ), # 3
    (4, TType.I32, 'pid', None, None, ), # 4
    (5, TType.DOUBLE, 'cpu_percent', None, None, ), # 5
    (6, TType.DOUBLE, 'mem_percent', None, None, ), # 6
    (7, TType.I64, 'run_time', None, None, ), # 7
  )

  def __init__(self, id=None, name=None, status=None, pid=None, cpu_percent=None, mem_percent=None, run_time=None,):
    self.id = id
    self.name = name
    self.status = status
    self.pid = pid
    self.cpu_percent = cpu_percent
    self.mem_percent = mem_percent
    self.run_time = run_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.cpu_percent = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.mem_percent = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.run_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProcessStatus')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 3)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 4)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    if self.cpu_percent is not None:
      oprot.writeFieldBegin('cpu_percent', TType.DOUBLE, 5)
      oprot.writeDouble(self.cpu_percent)
      oprot.writeFieldEnd()
    if self.mem_percent is not None:
      oprot.writeFieldBegin('mem_percent', TType.DOUBLE, 6)
      oprot.writeDouble(self.mem_percent)
      oprot.writeFieldEnd()
    if self.run_time is not None:
      oprot.writeFieldBegin('run_time', TType.I64, 7)
      oprot.writeI64(self.run_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.pid)
    value = (value * 31) ^ hash(self.cpu_percent)
    value = (value * 31) ^ hash(self.mem_percent)
    value = (value * 31) ^ hash(self.run_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Process:
  """
  Attributes:
   - id
   - name
   - program
   - running
   - auto_restart
   - arguments
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'program', None, None, ), # 3
    (4, TType.BOOL, 'running', None, None, ), # 4
    (5, TType.BOOL, 'auto_restart', None, None, ), # 5
    (6, TType.STRING, 'arguments', None, None, ), # 6
  )

  def __init__(self, id=None, name=None, program=None, running=None, auto_restart=None, arguments=None,):
    self.id = id
    self.name = name
    self.program = program
    self.running = running
    self.auto_restart = auto_restart
    self.arguments = arguments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.program = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.running = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.auto_restart = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.arguments = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Process')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.program is not None:
      oprot.writeFieldBegin('program', TType.STRING, 3)
      oprot.writeString(self.program)
      oprot.writeFieldEnd()
    if self.running is not None:
      oprot.writeFieldBegin('running', TType.BOOL, 4)
      oprot.writeBool(self.running)
      oprot.writeFieldEnd()
    if self.auto_restart is not None:
      oprot.writeFieldBegin('auto_restart', TType.BOOL, 5)
      oprot.writeBool(self.auto_restart)
      oprot.writeFieldEnd()
    if self.arguments is not None:
      oprot.writeFieldBegin('arguments', TType.STRING, 6)
      oprot.writeString(self.arguments)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.program)
    value = (value * 31) ^ hash(self.running)
    value = (value * 31) ^ hash(self.auto_restart)
    value = (value * 31) ^ hash(self.arguments)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeartbeatRequest:
  """
  Attributes:
   - version
   - host_name
   - ip_address
   - cpu_usage
   - mem_usage
   - processes_stats
   - mounted_avail_space
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'version', None, None, ), # 1
    (2, TType.STRING, 'host_name', None, None, ), # 2
    (3, TType.STRING, 'ip_address', None, None, ), # 3
    (4, TType.DOUBLE, 'cpu_usage', None, None, ), # 4
    (5, TType.DOUBLE, 'mem_usage', None, None, ), # 5
    (6, TType.LIST, 'processes_stats', (TType.STRUCT,(ProcessStatus, ProcessStatus.thrift_spec)), None, ), # 6
    (7, TType.MAP, 'mounted_avail_space', (TType.STRING,None,TType.I64,None), None, ), # 7
  )

  def __init__(self, version=None, host_name=None, ip_address=None, cpu_usage=None, mem_usage=None, processes_stats=None, mounted_avail_space=None,):
    self.version = version
    self.host_name = host_name
    self.ip_address = ip_address
    self.cpu_usage = cpu_usage
    self.mem_usage = mem_usage
    self.processes_stats = processes_stats
    self.mounted_avail_space = mounted_avail_space

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.version = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.host_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.cpu_usage = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.mem_usage = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.processes_stats = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ProcessStatus()
            _elem5.read(iprot)
            self.processes_stats.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.mounted_avail_space = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin()
          for _i10 in xrange(_size6):
            _key11 = iprot.readString()
            _val12 = iprot.readI64()
            self.mounted_avail_space[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeartbeatRequest')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 1)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.host_name is not None:
      oprot.writeFieldBegin('host_name', TType.STRING, 2)
      oprot.writeString(self.host_name)
      oprot.writeFieldEnd()
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 3)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.cpu_usage is not None:
      oprot.writeFieldBegin('cpu_usage', TType.DOUBLE, 4)
      oprot.writeDouble(self.cpu_usage)
      oprot.writeFieldEnd()
    if self.mem_usage is not None:
      oprot.writeFieldBegin('mem_usage', TType.DOUBLE, 5)
      oprot.writeDouble(self.mem_usage)
      oprot.writeFieldEnd()
    if self.processes_stats is not None:
      oprot.writeFieldBegin('processes_stats', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.processes_stats))
      for iter13 in self.processes_stats:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mounted_avail_space is not None:
      oprot.writeFieldBegin('mounted_avail_space', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.mounted_avail_space))
      for kiter14,viter15 in self.mounted_avail_space.items():
        oprot.writeString(kiter14)
        oprot.writeI64(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.host_name)
    value = (value * 31) ^ hash(self.ip_address)
    value = (value * 31) ^ hash(self.cpu_usage)
    value = (value * 31) ^ hash(self.mem_usage)
    value = (value * 31) ^ hash(self.processes_stats)
    value = (value * 31) ^ hash(self.mounted_avail_space)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeartbeatResponse:
  """
  Attributes:
   - host_name
   - heartbeat_interval
   - metric_interval
   - processes
   - extra_configs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'host_name', None, None, ), # 1
    (2, TType.I32, 'heartbeat_interval', None, None, ), # 2
    (3, TType.I32, 'metric_interval', None, None, ), # 3
    (4, TType.LIST, 'processes', (TType.STRUCT,(Process, Process.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'extra_configs', (TType.STRING,None,TType.STRING,None), None, ), # 5
  )

  def __init__(self, host_name=None, heartbeat_interval=None, metric_interval=None, processes=None, extra_configs=None,):
    self.host_name = host_name
    self.heartbeat_interval = heartbeat_interval
    self.metric_interval = metric_interval
    self.processes = processes
    self.extra_configs = extra_configs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.host_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.heartbeat_interval = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.metric_interval = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.processes = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = Process()
            _elem21.read(iprot)
            self.processes.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.extra_configs = {}
          (_ktype23, _vtype24, _size22 ) = iprot.readMapBegin()
          for _i26 in xrange(_size22):
            _key27 = iprot.readString()
            _val28 = iprot.readString()
            self.extra_configs[_key27] = _val28
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeartbeatResponse')
    if self.host_name is not None:
      oprot.writeFieldBegin('host_name', TType.STRING, 1)
      oprot.writeString(self.host_name)
      oprot.writeFieldEnd()
    if self.heartbeat_interval is not None:
      oprot.writeFieldBegin('heartbeat_interval', TType.I32, 2)
      oprot.writeI32(self.heartbeat_interval)
      oprot.writeFieldEnd()
    if self.metric_interval is not None:
      oprot.writeFieldBegin('metric_interval', TType.I32, 3)
      oprot.writeI32(self.metric_interval)
      oprot.writeFieldEnd()
    if self.processes is not None:
      oprot.writeFieldBegin('processes', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.processes))
      for iter29 in self.processes:
        iter29.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extra_configs is not None:
      oprot.writeFieldBegin('extra_configs', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra_configs))
      for kiter30,viter31 in self.extra_configs.items():
        oprot.writeString(kiter30)
        oprot.writeString(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.host_name)
    value = (value * 31) ^ hash(self.heartbeat_interval)
    value = (value * 31) ^ hash(self.metric_interval)
    value = (value * 31) ^ hash(self.processes)
    value = (value * 31) ^ hash(self.extra_configs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
