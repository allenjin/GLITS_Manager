/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.grandland.glits.ms.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-04")
public class MetricMessage implements org.apache.thrift.TBase<MetricMessage, MetricMessage._Fields>, java.io.Serializable, Cloneable, Comparable<MetricMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetricMessage");

  private static final org.apache.thrift.protocol.TField TS_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("ts_secs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("host_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("host_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NET_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("net_updates", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField FS_UPDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("fs_updates", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricMessageTupleSchemeFactory());
  }

  public long ts_secs; // required
  public String host_name; // required
  public int host_id; // required
  public List<MetricValue> metrics; // required
  public List<NetUpdate> net_updates; // required
  public List<FsUpdate> fs_updates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TS_SECS((short)1, "ts_secs"),
    HOST_NAME((short)2, "host_name"),
    HOST_ID((short)3, "host_id"),
    METRICS((short)4, "metrics"),
    NET_UPDATES((short)5, "net_updates"),
    FS_UPDATES((short)6, "fs_updates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TS_SECS
          return TS_SECS;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 3: // HOST_ID
          return HOST_ID;
        case 4: // METRICS
          return METRICS;
        case 5: // NET_UPDATES
          return NET_UPDATES;
        case 6: // FS_UPDATES
          return FS_UPDATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TS_SECS_ISSET_ID = 0;
  private static final int __HOST_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TS_SECS, new org.apache.thrift.meta_data.FieldMetaData("ts_secs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("host_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_ID, new org.apache.thrift.meta_data.FieldMetaData("host_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricValue.class))));
    tmpMap.put(_Fields.NET_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("net_updates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetUpdate.class))));
    tmpMap.put(_Fields.FS_UPDATES, new org.apache.thrift.meta_data.FieldMetaData("fs_updates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FsUpdate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetricMessage.class, metaDataMap);
  }

  public MetricMessage() {
  }

  public MetricMessage(
    long ts_secs,
    String host_name,
    int host_id,
    List<MetricValue> metrics,
    List<NetUpdate> net_updates,
    List<FsUpdate> fs_updates)
  {
    this();
    this.ts_secs = ts_secs;
    setTs_secsIsSet(true);
    this.host_name = host_name;
    this.host_id = host_id;
    setHost_idIsSet(true);
    this.metrics = metrics;
    this.net_updates = net_updates;
    this.fs_updates = fs_updates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricMessage(MetricMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ts_secs = other.ts_secs;
    if (other.isSetHost_name()) {
      this.host_name = other.host_name;
    }
    this.host_id = other.host_id;
    if (other.isSetMetrics()) {
      List<MetricValue> __this__metrics = new ArrayList<MetricValue>(other.metrics.size());
      for (MetricValue other_element : other.metrics) {
        __this__metrics.add(new MetricValue(other_element));
      }
      this.metrics = __this__metrics;
    }
    if (other.isSetNet_updates()) {
      List<NetUpdate> __this__net_updates = new ArrayList<NetUpdate>(other.net_updates.size());
      for (NetUpdate other_element : other.net_updates) {
        __this__net_updates.add(new NetUpdate(other_element));
      }
      this.net_updates = __this__net_updates;
    }
    if (other.isSetFs_updates()) {
      List<FsUpdate> __this__fs_updates = new ArrayList<FsUpdate>(other.fs_updates.size());
      for (FsUpdate other_element : other.fs_updates) {
        __this__fs_updates.add(new FsUpdate(other_element));
      }
      this.fs_updates = __this__fs_updates;
    }
  }

  public MetricMessage deepCopy() {
    return new MetricMessage(this);
  }

  @Override
  public void clear() {
    setTs_secsIsSet(false);
    this.ts_secs = 0;
    this.host_name = null;
    setHost_idIsSet(false);
    this.host_id = 0;
    this.metrics = null;
    this.net_updates = null;
    this.fs_updates = null;
  }

  public long getTs_secs() {
    return this.ts_secs;
  }

  public MetricMessage setTs_secs(long ts_secs) {
    this.ts_secs = ts_secs;
    setTs_secsIsSet(true);
    return this;
  }

  public void unsetTs_secs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TS_SECS_ISSET_ID);
  }

  /** Returns true if field ts_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetTs_secs() {
    return EncodingUtils.testBit(__isset_bitfield, __TS_SECS_ISSET_ID);
  }

  public void setTs_secsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TS_SECS_ISSET_ID, value);
  }

  public String getHost_name() {
    return this.host_name;
  }

  public MetricMessage setHost_name(String host_name) {
    this.host_name = host_name;
    return this;
  }

  public void unsetHost_name() {
    this.host_name = null;
  }

  /** Returns true if field host_name is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_name() {
    return this.host_name != null;
  }

  public void setHost_nameIsSet(boolean value) {
    if (!value) {
      this.host_name = null;
    }
  }

  public int getHost_id() {
    return this.host_id;
  }

  public MetricMessage setHost_id(int host_id) {
    this.host_id = host_id;
    setHost_idIsSet(true);
    return this;
  }

  public void unsetHost_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOST_ID_ISSET_ID);
  }

  /** Returns true if field host_id is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_id() {
    return EncodingUtils.testBit(__isset_bitfield, __HOST_ID_ISSET_ID);
  }

  public void setHost_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOST_ID_ISSET_ID, value);
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<MetricValue> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(MetricValue elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<MetricValue>();
    }
    this.metrics.add(elem);
  }

  public List<MetricValue> getMetrics() {
    return this.metrics;
  }

  public MetricMessage setMetrics(List<MetricValue> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getNet_updatesSize() {
    return (this.net_updates == null) ? 0 : this.net_updates.size();
  }

  public java.util.Iterator<NetUpdate> getNet_updatesIterator() {
    return (this.net_updates == null) ? null : this.net_updates.iterator();
  }

  public void addToNet_updates(NetUpdate elem) {
    if (this.net_updates == null) {
      this.net_updates = new ArrayList<NetUpdate>();
    }
    this.net_updates.add(elem);
  }

  public List<NetUpdate> getNet_updates() {
    return this.net_updates;
  }

  public MetricMessage setNet_updates(List<NetUpdate> net_updates) {
    this.net_updates = net_updates;
    return this;
  }

  public void unsetNet_updates() {
    this.net_updates = null;
  }

  /** Returns true if field net_updates is set (has been assigned a value) and false otherwise */
  public boolean isSetNet_updates() {
    return this.net_updates != null;
  }

  public void setNet_updatesIsSet(boolean value) {
    if (!value) {
      this.net_updates = null;
    }
  }

  public int getFs_updatesSize() {
    return (this.fs_updates == null) ? 0 : this.fs_updates.size();
  }

  public java.util.Iterator<FsUpdate> getFs_updatesIterator() {
    return (this.fs_updates == null) ? null : this.fs_updates.iterator();
  }

  public void addToFs_updates(FsUpdate elem) {
    if (this.fs_updates == null) {
      this.fs_updates = new ArrayList<FsUpdate>();
    }
    this.fs_updates.add(elem);
  }

  public List<FsUpdate> getFs_updates() {
    return this.fs_updates;
  }

  public MetricMessage setFs_updates(List<FsUpdate> fs_updates) {
    this.fs_updates = fs_updates;
    return this;
  }

  public void unsetFs_updates() {
    this.fs_updates = null;
  }

  /** Returns true if field fs_updates is set (has been assigned a value) and false otherwise */
  public boolean isSetFs_updates() {
    return this.fs_updates != null;
  }

  public void setFs_updatesIsSet(boolean value) {
    if (!value) {
      this.fs_updates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TS_SECS:
      if (value == null) {
        unsetTs_secs();
      } else {
        setTs_secs((Long)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHost_name();
      } else {
        setHost_name((String)value);
      }
      break;

    case HOST_ID:
      if (value == null) {
        unsetHost_id();
      } else {
        setHost_id((Integer)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((List<MetricValue>)value);
      }
      break;

    case NET_UPDATES:
      if (value == null) {
        unsetNet_updates();
      } else {
        setNet_updates((List<NetUpdate>)value);
      }
      break;

    case FS_UPDATES:
      if (value == null) {
        unsetFs_updates();
      } else {
        setFs_updates((List<FsUpdate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TS_SECS:
      return getTs_secs();

    case HOST_NAME:
      return getHost_name();

    case HOST_ID:
      return getHost_id();

    case METRICS:
      return getMetrics();

    case NET_UPDATES:
      return getNet_updates();

    case FS_UPDATES:
      return getFs_updates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TS_SECS:
      return isSetTs_secs();
    case HOST_NAME:
      return isSetHost_name();
    case HOST_ID:
      return isSetHost_id();
    case METRICS:
      return isSetMetrics();
    case NET_UPDATES:
      return isSetNet_updates();
    case FS_UPDATES:
      return isSetFs_updates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricMessage)
      return this.equals((MetricMessage)that);
    return false;
  }

  public boolean equals(MetricMessage that) {
    if (that == null)
      return false;

    boolean this_present_ts_secs = true;
    boolean that_present_ts_secs = true;
    if (this_present_ts_secs || that_present_ts_secs) {
      if (!(this_present_ts_secs && that_present_ts_secs))
        return false;
      if (this.ts_secs != that.ts_secs)
        return false;
    }

    boolean this_present_host_name = true && this.isSetHost_name();
    boolean that_present_host_name = true && that.isSetHost_name();
    if (this_present_host_name || that_present_host_name) {
      if (!(this_present_host_name && that_present_host_name))
        return false;
      if (!this.host_name.equals(that.host_name))
        return false;
    }

    boolean this_present_host_id = true;
    boolean that_present_host_id = true;
    if (this_present_host_id || that_present_host_id) {
      if (!(this_present_host_id && that_present_host_id))
        return false;
      if (this.host_id != that.host_id)
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_net_updates = true && this.isSetNet_updates();
    boolean that_present_net_updates = true && that.isSetNet_updates();
    if (this_present_net_updates || that_present_net_updates) {
      if (!(this_present_net_updates && that_present_net_updates))
        return false;
      if (!this.net_updates.equals(that.net_updates))
        return false;
    }

    boolean this_present_fs_updates = true && this.isSetFs_updates();
    boolean that_present_fs_updates = true && that.isSetFs_updates();
    if (this_present_fs_updates || that_present_fs_updates) {
      if (!(this_present_fs_updates && that_present_fs_updates))
        return false;
      if (!this.fs_updates.equals(that.fs_updates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ts_secs = true;
    list.add(present_ts_secs);
    if (present_ts_secs)
      list.add(ts_secs);

    boolean present_host_name = true && (isSetHost_name());
    list.add(present_host_name);
    if (present_host_name)
      list.add(host_name);

    boolean present_host_id = true;
    list.add(present_host_id);
    if (present_host_id)
      list.add(host_id);

    boolean present_metrics = true && (isSetMetrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_net_updates = true && (isSetNet_updates());
    list.add(present_net_updates);
    if (present_net_updates)
      list.add(net_updates);

    boolean present_fs_updates = true && (isSetFs_updates());
    list.add(present_fs_updates);
    if (present_fs_updates)
      list.add(fs_updates);

    return list.hashCode();
  }

  @Override
  public int compareTo(MetricMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTs_secs()).compareTo(other.isSetTs_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts_secs, other.ts_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost_name()).compareTo(other.isSetHost_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_name, other.host_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost_id()).compareTo(other.isSetHost_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_id, other.host_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNet_updates()).compareTo(other.isSetNet_updates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNet_updates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.net_updates, other.net_updates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFs_updates()).compareTo(other.isSetFs_updates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFs_updates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fs_updates, other.fs_updates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricMessage(");
    boolean first = true;

    sb.append("ts_secs:");
    sb.append(this.ts_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("host_name:");
    if (this.host_name == null) {
      sb.append("null");
    } else {
      sb.append(this.host_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host_id:");
    sb.append(this.host_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("net_updates:");
    if (this.net_updates == null) {
      sb.append("null");
    } else {
      sb.append(this.net_updates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fs_updates:");
    if (this.fs_updates == null) {
      sb.append("null");
    } else {
      sb.append(this.fs_updates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricMessageStandardSchemeFactory implements SchemeFactory {
    public MetricMessageStandardScheme getScheme() {
      return new MetricMessageStandardScheme();
    }
  }

  private static class MetricMessageStandardScheme extends StandardScheme<MetricMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetricMessage struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TS_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ts_secs = iprot.readI64();
              struct.setTs_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host_name = iprot.readString();
              struct.setHost_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.host_id = iprot.readI32();
              struct.setHost_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.metrics = new ArrayList<MetricValue>(_list16.size);
                MetricValue _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new MetricValue();
                  _elem17.read(iprot);
                  struct.metrics.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NET_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.net_updates = new ArrayList<NetUpdate>(_list19.size);
                NetUpdate _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new NetUpdate();
                  _elem20.read(iprot);
                  struct.net_updates.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setNet_updatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FS_UPDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.fs_updates = new ArrayList<FsUpdate>(_list22.size);
                FsUpdate _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new FsUpdate();
                  _elem23.read(iprot);
                  struct.fs_updates.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setFs_updatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetricMessage struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TS_SECS_FIELD_DESC);
      oprot.writeI64(struct.ts_secs);
      oprot.writeFieldEnd();
      if (struct.host_name != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.host_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOST_ID_FIELD_DESC);
      oprot.writeI32(struct.host_id);
      oprot.writeFieldEnd();
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metrics.size()));
          for (MetricValue _iter25 : struct.metrics)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.net_updates != null) {
        oprot.writeFieldBegin(NET_UPDATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.net_updates.size()));
          for (NetUpdate _iter26 : struct.net_updates)
          {
            _iter26.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fs_updates != null) {
        oprot.writeFieldBegin(FS_UPDATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fs_updates.size()));
          for (FsUpdate _iter27 : struct.fs_updates)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricMessageTupleSchemeFactory implements SchemeFactory {
    public MetricMessageTupleScheme getScheme() {
      return new MetricMessageTupleScheme();
    }
  }

  private static class MetricMessageTupleScheme extends TupleScheme<MetricMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetricMessage struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTs_secs()) {
        optionals.set(0);
      }
      if (struct.isSetHost_name()) {
        optionals.set(1);
      }
      if (struct.isSetHost_id()) {
        optionals.set(2);
      }
      if (struct.isSetMetrics()) {
        optionals.set(3);
      }
      if (struct.isSetNet_updates()) {
        optionals.set(4);
      }
      if (struct.isSetFs_updates()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTs_secs()) {
        oprot.writeI64(struct.ts_secs);
      }
      if (struct.isSetHost_name()) {
        oprot.writeString(struct.host_name);
      }
      if (struct.isSetHost_id()) {
        oprot.writeI32(struct.host_id);
      }
      if (struct.isSetMetrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (MetricValue _iter28 : struct.metrics)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetNet_updates()) {
        {
          oprot.writeI32(struct.net_updates.size());
          for (NetUpdate _iter29 : struct.net_updates)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetFs_updates()) {
        {
          oprot.writeI32(struct.fs_updates.size());
          for (FsUpdate _iter30 : struct.fs_updates)
          {
            _iter30.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetricMessage struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.ts_secs = iprot.readI64();
        struct.setTs_secsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.host_name = iprot.readString();
        struct.setHost_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.host_id = iprot.readI32();
        struct.setHost_idIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.metrics = new ArrayList<MetricValue>(_list31.size);
          MetricValue _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new MetricValue();
            _elem32.read(iprot);
            struct.metrics.add(_elem32);
          }
        }
        struct.setMetricsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.net_updates = new ArrayList<NetUpdate>(_list34.size);
          NetUpdate _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new NetUpdate();
            _elem35.read(iprot);
            struct.net_updates.add(_elem35);
          }
        }
        struct.setNet_updatesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fs_updates = new ArrayList<FsUpdate>(_list37.size);
          FsUpdate _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new FsUpdate();
            _elem38.read(iprot);
            struct.fs_updates.add(_elem38);
          }
        }
        struct.setFs_updatesIsSet(true);
      }
    }
  }

}

