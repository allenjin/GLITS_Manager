/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.grandland.glits.ms.protocol;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HeartbeatResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HeartbeatResponse\",\"namespace\":\"com.grandland.glits.ms.protocol\",\"fields\":[{\"name\":\"host_name\",\"type\":\"string\"},{\"name\":\"heartbeat_interval\",\"type\":\"long\"},{\"name\":\"processes\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"extra_configs\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence host_name;
  @Deprecated public long heartbeat_interval;
  @Deprecated public java.util.Map<CharSequence,CharSequence> processes;
  @Deprecated public java.util.Map<CharSequence,CharSequence> extra_configs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HeartbeatResponse() {}

  /**
   * All-args constructor.
   */
  public HeartbeatResponse(CharSequence host_name, Long heartbeat_interval, java.util.Map<CharSequence,CharSequence> processes, java.util.Map<CharSequence,CharSequence> extra_configs) {
    this.host_name = host_name;
    this.heartbeat_interval = heartbeat_interval;
    this.processes = processes;
    this.extra_configs = extra_configs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return host_name;
    case 1: return heartbeat_interval;
    case 2: return processes;
    case 3: return extra_configs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: host_name = (CharSequence)value$; break;
    case 1: heartbeat_interval = (Long)value$; break;
    case 2: processes = (java.util.Map<CharSequence,CharSequence>)value$; break;
    case 3: extra_configs = (java.util.Map<CharSequence,CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'host_name' field.
   */
  public CharSequence getHostName() {
    return host_name;
  }

  /**
   * Sets the value of the 'host_name' field.
   * @param value the value to set.
   */
  public void setHostName(CharSequence value) {
    this.host_name = value;
  }

  /**
   * Gets the value of the 'heartbeat_interval' field.
   */
  public Long getHeartbeatInterval() {
    return heartbeat_interval;
  }

  /**
   * Sets the value of the 'heartbeat_interval' field.
   * @param value the value to set.
   */
  public void setHeartbeatInterval(Long value) {
    this.heartbeat_interval = value;
  }

  /**
   * Gets the value of the 'processes' field.
   */
  public java.util.Map<CharSequence,CharSequence> getProcesses() {
    return processes;
  }

  /**
   * Sets the value of the 'processes' field.
   * @param value the value to set.
   */
  public void setProcesses(java.util.Map<CharSequence,CharSequence> value) {
    this.processes = value;
  }

  /**
   * Gets the value of the 'extra_configs' field.
   */
  public java.util.Map<CharSequence,CharSequence> getExtraConfigs() {
    return extra_configs;
  }

  /**
   * Sets the value of the 'extra_configs' field.
   * @param value the value to set.
   */
  public void setExtraConfigs(java.util.Map<CharSequence,CharSequence> value) {
    this.extra_configs = value;
  }

  /** Creates a new HeartbeatResponse RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new HeartbeatResponse RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new HeartbeatResponse RecordBuilder by copying an existing HeartbeatResponse instance */
  public static Builder newBuilder(HeartbeatResponse other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for HeartbeatResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HeartbeatResponse>
    implements org.apache.avro.data.RecordBuilder<HeartbeatResponse> {

    private CharSequence host_name;
    private long heartbeat_interval;
    private java.util.Map<CharSequence,CharSequence> processes;
    private java.util.Map<CharSequence,CharSequence> extra_configs;

    /** Creates a new Builder */
    private Builder() {
      super(HeartbeatResponse.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.host_name)) {
        this.host_name = data().deepCopy(fields()[0].schema(), other.host_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.heartbeat_interval)) {
        this.heartbeat_interval = data().deepCopy(fields()[1].schema(), other.heartbeat_interval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.processes)) {
        this.processes = data().deepCopy(fields()[2].schema(), other.processes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.extra_configs)) {
        this.extra_configs = data().deepCopy(fields()[3].schema(), other.extra_configs);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HeartbeatResponse instance */
    private Builder(HeartbeatResponse other) {
            super(HeartbeatResponse.SCHEMA$);
      if (isValidValue(fields()[0], other.host_name)) {
        this.host_name = data().deepCopy(fields()[0].schema(), other.host_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.heartbeat_interval)) {
        this.heartbeat_interval = data().deepCopy(fields()[1].schema(), other.heartbeat_interval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.processes)) {
        this.processes = data().deepCopy(fields()[2].schema(), other.processes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.extra_configs)) {
        this.extra_configs = data().deepCopy(fields()[3].schema(), other.extra_configs);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'host_name' field */
    public CharSequence getHostName() {
      return host_name;
    }
    
    /** Sets the value of the 'host_name' field */
    public Builder setHostName(CharSequence value) {
      validate(fields()[0], value);
      this.host_name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'host_name' field has been set */
    public boolean hasHostName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'host_name' field */
    public Builder clearHostName() {
      host_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'heartbeat_interval' field */
    public Long getHeartbeatInterval() {
      return heartbeat_interval;
    }
    
    /** Sets the value of the 'heartbeat_interval' field */
    public Builder setHeartbeatInterval(long value) {
      validate(fields()[1], value);
      this.heartbeat_interval = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'heartbeat_interval' field has been set */
    public boolean hasHeartbeatInterval() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'heartbeat_interval' field */
    public Builder clearHeartbeatInterval() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'processes' field */
    public java.util.Map<CharSequence,CharSequence> getProcesses() {
      return processes;
    }
    
    /** Sets the value of the 'processes' field */
    public Builder setProcesses(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[2], value);
      this.processes = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'processes' field has been set */
    public boolean hasProcesses() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'processes' field */
    public Builder clearProcesses() {
      processes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'extra_configs' field */
    public java.util.Map<CharSequence,CharSequence> getExtraConfigs() {
      return extra_configs;
    }
    
    /** Sets the value of the 'extra_configs' field */
    public Builder setExtraConfigs(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[3], value);
      this.extra_configs = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'extra_configs' field has been set */
    public boolean hasExtraConfigs() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'extra_configs' field */
    public Builder clearExtraConfigs() {
      extra_configs = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public HeartbeatResponse build() {
      try {
        HeartbeatResponse record = new HeartbeatResponse();
        record.host_name = fieldSetFlags()[0] ? this.host_name : (CharSequence) defaultValue(fields()[0]);
        record.heartbeat_interval = fieldSetFlags()[1] ? this.heartbeat_interval : (Long) defaultValue(fields()[1]);
        record.processes = fieldSetFlags()[2] ? this.processes : (java.util.Map<CharSequence,CharSequence>) defaultValue(fields()[2]);
        record.extra_configs = fieldSetFlags()[3] ? this.extra_configs : (java.util.Map<CharSequence,CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
