/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.grandland.glits.ms.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-04")
public class HeartbeatResponse implements org.apache.thrift.TBase<HeartbeatResponse, HeartbeatResponse._Fields>, java.io.Serializable, Cloneable, Comparable<HeartbeatResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HeartbeatResponse");

  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("host_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HEARTBEAT_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("heartbeat_interval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField METRIC_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("metric_interval", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("processes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EXTRA_CONFIGS_FIELD_DESC = new org.apache.thrift.protocol.TField("extra_configs", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeartbeatResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeartbeatResponseTupleSchemeFactory());
  }

  public String host_name; // required
  public int heartbeat_interval; // required
  public int metric_interval; // required
  public List<Process> processes; // required
  public Map<String,String> extra_configs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAME((short)1, "host_name"),
    HEARTBEAT_INTERVAL((short)2, "heartbeat_interval"),
    METRIC_INTERVAL((short)3, "metric_interval"),
    PROCESSES((short)4, "processes"),
    EXTRA_CONFIGS((short)5, "extra_configs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAME
          return HOST_NAME;
        case 2: // HEARTBEAT_INTERVAL
          return HEARTBEAT_INTERVAL;
        case 3: // METRIC_INTERVAL
          return METRIC_INTERVAL;
        case 4: // PROCESSES
          return PROCESSES;
        case 5: // EXTRA_CONFIGS
          return EXTRA_CONFIGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEARTBEAT_INTERVAL_ISSET_ID = 0;
  private static final int __METRIC_INTERVAL_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("host_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEARTBEAT_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("heartbeat_interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.METRIC_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("metric_interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PROCESSES, new org.apache.thrift.meta_data.FieldMetaData("processes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Process.class))));
    tmpMap.put(_Fields.EXTRA_CONFIGS, new org.apache.thrift.meta_data.FieldMetaData("extra_configs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartbeatResponse.class, metaDataMap);
  }

  public HeartbeatResponse() {
  }

  public HeartbeatResponse(
    String host_name,
    int heartbeat_interval,
    int metric_interval,
    List<Process> processes,
    Map<String,String> extra_configs)
  {
    this();
    this.host_name = host_name;
    this.heartbeat_interval = heartbeat_interval;
    setHeartbeat_intervalIsSet(true);
    this.metric_interval = metric_interval;
    setMetric_intervalIsSet(true);
    this.processes = processes;
    this.extra_configs = extra_configs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HeartbeatResponse(HeartbeatResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHost_name()) {
      this.host_name = other.host_name;
    }
    this.heartbeat_interval = other.heartbeat_interval;
    this.metric_interval = other.metric_interval;
    if (other.isSetProcesses()) {
      List<Process> __this__processes = new ArrayList<Process>(other.processes.size());
      for (Process other_element : other.processes) {
        __this__processes.add(new Process(other_element));
      }
      this.processes = __this__processes;
    }
    if (other.isSetExtra_configs()) {
      Map<String,String> __this__extra_configs = new HashMap<String,String>(other.extra_configs);
      this.extra_configs = __this__extra_configs;
    }
  }

  public HeartbeatResponse deepCopy() {
    return new HeartbeatResponse(this);
  }

  @Override
  public void clear() {
    this.host_name = null;
    setHeartbeat_intervalIsSet(false);
    this.heartbeat_interval = 0;
    setMetric_intervalIsSet(false);
    this.metric_interval = 0;
    this.processes = null;
    this.extra_configs = null;
  }

  public String getHost_name() {
    return this.host_name;
  }

  public HeartbeatResponse setHost_name(String host_name) {
    this.host_name = host_name;
    return this;
  }

  public void unsetHost_name() {
    this.host_name = null;
  }

  /** Returns true if field host_name is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_name() {
    return this.host_name != null;
  }

  public void setHost_nameIsSet(boolean value) {
    if (!value) {
      this.host_name = null;
    }
  }

  public int getHeartbeat_interval() {
    return this.heartbeat_interval;
  }

  public HeartbeatResponse setHeartbeat_interval(int heartbeat_interval) {
    this.heartbeat_interval = heartbeat_interval;
    setHeartbeat_intervalIsSet(true);
    return this;
  }

  public void unsetHeartbeat_interval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEARTBEAT_INTERVAL_ISSET_ID);
  }

  /** Returns true if field heartbeat_interval is set (has been assigned a value) and false otherwise */
  public boolean isSetHeartbeat_interval() {
    return EncodingUtils.testBit(__isset_bitfield, __HEARTBEAT_INTERVAL_ISSET_ID);
  }

  public void setHeartbeat_intervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEARTBEAT_INTERVAL_ISSET_ID, value);
  }

  public int getMetric_interval() {
    return this.metric_interval;
  }

  public HeartbeatResponse setMetric_interval(int metric_interval) {
    this.metric_interval = metric_interval;
    setMetric_intervalIsSet(true);
    return this;
  }

  public void unsetMetric_interval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METRIC_INTERVAL_ISSET_ID);
  }

  /** Returns true if field metric_interval is set (has been assigned a value) and false otherwise */
  public boolean isSetMetric_interval() {
    return EncodingUtils.testBit(__isset_bitfield, __METRIC_INTERVAL_ISSET_ID);
  }

  public void setMetric_intervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METRIC_INTERVAL_ISSET_ID, value);
  }

  public int getProcessesSize() {
    return (this.processes == null) ? 0 : this.processes.size();
  }

  public java.util.Iterator<Process> getProcessesIterator() {
    return (this.processes == null) ? null : this.processes.iterator();
  }

  public void addToProcesses(Process elem) {
    if (this.processes == null) {
      this.processes = new ArrayList<Process>();
    }
    this.processes.add(elem);
  }

  public List<Process> getProcesses() {
    return this.processes;
  }

  public HeartbeatResponse setProcesses(List<Process> processes) {
    this.processes = processes;
    return this;
  }

  public void unsetProcesses() {
    this.processes = null;
  }

  /** Returns true if field processes is set (has been assigned a value) and false otherwise */
  public boolean isSetProcesses() {
    return this.processes != null;
  }

  public void setProcessesIsSet(boolean value) {
    if (!value) {
      this.processes = null;
    }
  }

  public int getExtra_configsSize() {
    return (this.extra_configs == null) ? 0 : this.extra_configs.size();
  }

  public void putToExtra_configs(String key, String val) {
    if (this.extra_configs == null) {
      this.extra_configs = new HashMap<String,String>();
    }
    this.extra_configs.put(key, val);
  }

  public Map<String,String> getExtra_configs() {
    return this.extra_configs;
  }

  public HeartbeatResponse setExtra_configs(Map<String,String> extra_configs) {
    this.extra_configs = extra_configs;
    return this;
  }

  public void unsetExtra_configs() {
    this.extra_configs = null;
  }

  /** Returns true if field extra_configs is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra_configs() {
    return this.extra_configs != null;
  }

  public void setExtra_configsIsSet(boolean value) {
    if (!value) {
      this.extra_configs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_NAME:
      if (value == null) {
        unsetHost_name();
      } else {
        setHost_name((String)value);
      }
      break;

    case HEARTBEAT_INTERVAL:
      if (value == null) {
        unsetHeartbeat_interval();
      } else {
        setHeartbeat_interval((Integer)value);
      }
      break;

    case METRIC_INTERVAL:
      if (value == null) {
        unsetMetric_interval();
      } else {
        setMetric_interval((Integer)value);
      }
      break;

    case PROCESSES:
      if (value == null) {
        unsetProcesses();
      } else {
        setProcesses((List<Process>)value);
      }
      break;

    case EXTRA_CONFIGS:
      if (value == null) {
        unsetExtra_configs();
      } else {
        setExtra_configs((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAME:
      return getHost_name();

    case HEARTBEAT_INTERVAL:
      return getHeartbeat_interval();

    case METRIC_INTERVAL:
      return getMetric_interval();

    case PROCESSES:
      return getProcesses();

    case EXTRA_CONFIGS:
      return getExtra_configs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAME:
      return isSetHost_name();
    case HEARTBEAT_INTERVAL:
      return isSetHeartbeat_interval();
    case METRIC_INTERVAL:
      return isSetMetric_interval();
    case PROCESSES:
      return isSetProcesses();
    case EXTRA_CONFIGS:
      return isSetExtra_configs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HeartbeatResponse)
      return this.equals((HeartbeatResponse)that);
    return false;
  }

  public boolean equals(HeartbeatResponse that) {
    if (that == null)
      return false;

    boolean this_present_host_name = true && this.isSetHost_name();
    boolean that_present_host_name = true && that.isSetHost_name();
    if (this_present_host_name || that_present_host_name) {
      if (!(this_present_host_name && that_present_host_name))
        return false;
      if (!this.host_name.equals(that.host_name))
        return false;
    }

    boolean this_present_heartbeat_interval = true;
    boolean that_present_heartbeat_interval = true;
    if (this_present_heartbeat_interval || that_present_heartbeat_interval) {
      if (!(this_present_heartbeat_interval && that_present_heartbeat_interval))
        return false;
      if (this.heartbeat_interval != that.heartbeat_interval)
        return false;
    }

    boolean this_present_metric_interval = true;
    boolean that_present_metric_interval = true;
    if (this_present_metric_interval || that_present_metric_interval) {
      if (!(this_present_metric_interval && that_present_metric_interval))
        return false;
      if (this.metric_interval != that.metric_interval)
        return false;
    }

    boolean this_present_processes = true && this.isSetProcesses();
    boolean that_present_processes = true && that.isSetProcesses();
    if (this_present_processes || that_present_processes) {
      if (!(this_present_processes && that_present_processes))
        return false;
      if (!this.processes.equals(that.processes))
        return false;
    }

    boolean this_present_extra_configs = true && this.isSetExtra_configs();
    boolean that_present_extra_configs = true && that.isSetExtra_configs();
    if (this_present_extra_configs || that_present_extra_configs) {
      if (!(this_present_extra_configs && that_present_extra_configs))
        return false;
      if (!this.extra_configs.equals(that.extra_configs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_host_name = true && (isSetHost_name());
    list.add(present_host_name);
    if (present_host_name)
      list.add(host_name);

    boolean present_heartbeat_interval = true;
    list.add(present_heartbeat_interval);
    if (present_heartbeat_interval)
      list.add(heartbeat_interval);

    boolean present_metric_interval = true;
    list.add(present_metric_interval);
    if (present_metric_interval)
      list.add(metric_interval);

    boolean present_processes = true && (isSetProcesses());
    list.add(present_processes);
    if (present_processes)
      list.add(processes);

    boolean present_extra_configs = true && (isSetExtra_configs());
    list.add(present_extra_configs);
    if (present_extra_configs)
      list.add(extra_configs);

    return list.hashCode();
  }

  @Override
  public int compareTo(HeartbeatResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHost_name()).compareTo(other.isSetHost_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_name, other.host_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeartbeat_interval()).compareTo(other.isSetHeartbeat_interval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeartbeat_interval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heartbeat_interval, other.heartbeat_interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetric_interval()).compareTo(other.isSetMetric_interval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetric_interval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric_interval, other.metric_interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcesses()).compareTo(other.isSetProcesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processes, other.processes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra_configs()).compareTo(other.isSetExtra_configs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra_configs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra_configs, other.extra_configs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HeartbeatResponse(");
    boolean first = true;

    sb.append("host_name:");
    if (this.host_name == null) {
      sb.append("null");
    } else {
      sb.append(this.host_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("heartbeat_interval:");
    sb.append(this.heartbeat_interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metric_interval:");
    sb.append(this.metric_interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processes:");
    if (this.processes == null) {
      sb.append("null");
    } else {
      sb.append(this.processes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extra_configs:");
    if (this.extra_configs == null) {
      sb.append("null");
    } else {
      sb.append(this.extra_configs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeartbeatResponseStandardSchemeFactory implements SchemeFactory {
    public HeartbeatResponseStandardScheme getScheme() {
      return new HeartbeatResponseStandardScheme();
    }
  }

  private static class HeartbeatResponseStandardScheme extends StandardScheme<HeartbeatResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HeartbeatResponse struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host_name = iprot.readString();
              struct.setHost_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEARTBEAT_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heartbeat_interval = iprot.readI32();
              struct.setHeartbeat_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRIC_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.metric_interval = iprot.readI32();
              struct.setMetric_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROCESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.processes = new ArrayList<Process>(_list18.size);
                Process _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new Process();
                  _elem19.read(iprot);
                  struct.processes.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setProcessesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTRA_CONFIGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.extra_configs = new HashMap<String,String>(2*_map21.size);
                String _key22;
                String _val23;
                for (int _i24 = 0; _i24 < _map21.size; ++_i24)
                {
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.extra_configs.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setExtra_configsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HeartbeatResponse struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.host_name != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.host_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEARTBEAT_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.heartbeat_interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(METRIC_INTERVAL_FIELD_DESC);
      oprot.writeI32(struct.metric_interval);
      oprot.writeFieldEnd();
      if (struct.processes != null) {
        oprot.writeFieldBegin(PROCESSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.processes.size()));
          for (Process _iter25 : struct.processes)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.extra_configs != null) {
        oprot.writeFieldBegin(EXTRA_CONFIGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra_configs.size()));
          for (Map.Entry<String, String> _iter26 : struct.extra_configs.entrySet())
          {
            oprot.writeString(_iter26.getKey());
            oprot.writeString(_iter26.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeartbeatResponseTupleSchemeFactory implements SchemeFactory {
    public HeartbeatResponseTupleScheme getScheme() {
      return new HeartbeatResponseTupleScheme();
    }
  }

  private static class HeartbeatResponseTupleScheme extends TupleScheme<HeartbeatResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HeartbeatResponse struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHost_name()) {
        optionals.set(0);
      }
      if (struct.isSetHeartbeat_interval()) {
        optionals.set(1);
      }
      if (struct.isSetMetric_interval()) {
        optionals.set(2);
      }
      if (struct.isSetProcesses()) {
        optionals.set(3);
      }
      if (struct.isSetExtra_configs()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHost_name()) {
        oprot.writeString(struct.host_name);
      }
      if (struct.isSetHeartbeat_interval()) {
        oprot.writeI32(struct.heartbeat_interval);
      }
      if (struct.isSetMetric_interval()) {
        oprot.writeI32(struct.metric_interval);
      }
      if (struct.isSetProcesses()) {
        {
          oprot.writeI32(struct.processes.size());
          for (Process _iter27 : struct.processes)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetExtra_configs()) {
        {
          oprot.writeI32(struct.extra_configs.size());
          for (Map.Entry<String, String> _iter28 : struct.extra_configs.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HeartbeatResponse struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.host_name = iprot.readString();
        struct.setHost_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.heartbeat_interval = iprot.readI32();
        struct.setHeartbeat_intervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.metric_interval = iprot.readI32();
        struct.setMetric_intervalIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.processes = new ArrayList<Process>(_list29.size);
          Process _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new Process();
            _elem30.read(iprot);
            struct.processes.add(_elem30);
          }
        }
        struct.setProcessesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extra_configs = new HashMap<String,String>(2*_map32.size);
          String _key33;
          String _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readString();
            struct.extra_configs.put(_key33, _val34);
          }
        }
        struct.setExtra_configsIsSet(true);
      }
    }
  }

}

