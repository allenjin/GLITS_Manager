/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.grandland.glits.ms.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-30")
public class HeartbeatRequest implements org.apache.thrift.TBase<HeartbeatRequest, HeartbeatRequest._Fields>, java.io.Serializable, Cloneable, Comparable<HeartbeatRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HeartbeatRequest");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("host_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ip_address", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("total_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MEMORY_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_usage", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PROCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("processes", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField MOUNTED_AVAIL_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("mounted_avail_space", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeartbeatRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeartbeatRequestTupleSchemeFactory());
  }

  public int version; // required
  public String host_name; // required
  public String ip_address; // required
  public double total_cpu; // required
  public double memory_usage; // required
  public Map<String,String> processes; // required
  public Map<String,Long> mounted_avail_space; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    HOST_NAME((short)2, "host_name"),
    IP_ADDRESS((short)3, "ip_address"),
    TOTAL_CPU((short)4, "total_cpu"),
    MEMORY_USAGE((short)5, "memory_usage"),
    PROCESSES((short)6, "processes"),
    MOUNTED_AVAIL_SPACE((short)7, "mounted_avail_space");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 3: // IP_ADDRESS
          return IP_ADDRESS;
        case 4: // TOTAL_CPU
          return TOTAL_CPU;
        case 5: // MEMORY_USAGE
          return MEMORY_USAGE;
        case 6: // PROCESSES
          return PROCESSES;
        case 7: // MOUNTED_AVAIL_SPACE
          return MOUNTED_AVAIL_SPACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __TOTAL_CPU_ISSET_ID = 1;
  private static final int __MEMORY_USAGE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("host_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ip_address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_CPU, new org.apache.thrift.meta_data.FieldMetaData("total_cpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_USAGE, new org.apache.thrift.meta_data.FieldMetaData("memory_usage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROCESSES, new org.apache.thrift.meta_data.FieldMetaData("processes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MOUNTED_AVAIL_SPACE, new org.apache.thrift.meta_data.FieldMetaData("mounted_avail_space", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "long"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartbeatRequest.class, metaDataMap);
  }

  public HeartbeatRequest() {
  }

  public HeartbeatRequest(
    int version,
    String host_name,
    String ip_address,
    double total_cpu,
    double memory_usage,
    Map<String,String> processes,
    Map<String,Long> mounted_avail_space)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.host_name = host_name;
    this.ip_address = ip_address;
    this.total_cpu = total_cpu;
    setTotal_cpuIsSet(true);
    this.memory_usage = memory_usage;
    setMemory_usageIsSet(true);
    this.processes = processes;
    this.mounted_avail_space = mounted_avail_space;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HeartbeatRequest(HeartbeatRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetHost_name()) {
      this.host_name = other.host_name;
    }
    if (other.isSetIp_address()) {
      this.ip_address = other.ip_address;
    }
    this.total_cpu = other.total_cpu;
    this.memory_usage = other.memory_usage;
    if (other.isSetProcesses()) {
      Map<String,String> __this__processes = new HashMap<String,String>(other.processes);
      this.processes = __this__processes;
    }
    if (other.isSetMounted_avail_space()) {
      Map<String,Long> __this__mounted_avail_space = new HashMap<String,Long>(other.mounted_avail_space.size());
      for (Map.Entry<String, Long> other_element : other.mounted_avail_space.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__mounted_avail_space_copy_key = other_element_key;

        Long __this__mounted_avail_space_copy_value = other_element_value;

        __this__mounted_avail_space.put(__this__mounted_avail_space_copy_key, __this__mounted_avail_space_copy_value);
      }
      this.mounted_avail_space = __this__mounted_avail_space;
    }
  }

  public HeartbeatRequest deepCopy() {
    return new HeartbeatRequest(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.host_name = null;
    this.ip_address = null;
    setTotal_cpuIsSet(false);
    this.total_cpu = 0.0;
    setMemory_usageIsSet(false);
    this.memory_usage = 0.0;
    this.processes = null;
    this.mounted_avail_space = null;
  }

  public int getVersion() {
    return this.version;
  }

  public HeartbeatRequest setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getHost_name() {
    return this.host_name;
  }

  public HeartbeatRequest setHost_name(String host_name) {
    this.host_name = host_name;
    return this;
  }

  public void unsetHost_name() {
    this.host_name = null;
  }

  /** Returns true if field host_name is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_name() {
    return this.host_name != null;
  }

  public void setHost_nameIsSet(boolean value) {
    if (!value) {
      this.host_name = null;
    }
  }

  public String getIp_address() {
    return this.ip_address;
  }

  public HeartbeatRequest setIp_address(String ip_address) {
    this.ip_address = ip_address;
    return this;
  }

  public void unsetIp_address() {
    this.ip_address = null;
  }

  /** Returns true if field ip_address is set (has been assigned a value) and false otherwise */
  public boolean isSetIp_address() {
    return this.ip_address != null;
  }

  public void setIp_addressIsSet(boolean value) {
    if (!value) {
      this.ip_address = null;
    }
  }

  public double getTotal_cpu() {
    return this.total_cpu;
  }

  public HeartbeatRequest setTotal_cpu(double total_cpu) {
    this.total_cpu = total_cpu;
    setTotal_cpuIsSet(true);
    return this;
  }

  public void unsetTotal_cpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_CPU_ISSET_ID);
  }

  /** Returns true if field total_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_cpu() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_CPU_ISSET_ID);
  }

  public void setTotal_cpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_CPU_ISSET_ID, value);
  }

  public double getMemory_usage() {
    return this.memory_usage;
  }

  public HeartbeatRequest setMemory_usage(double memory_usage) {
    this.memory_usage = memory_usage;
    setMemory_usageIsSet(true);
    return this;
  }

  public void unsetMemory_usage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORY_USAGE_ISSET_ID);
  }

  /** Returns true if field memory_usage is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_usage() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMORY_USAGE_ISSET_ID);
  }

  public void setMemory_usageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORY_USAGE_ISSET_ID, value);
  }

  public int getProcessesSize() {
    return (this.processes == null) ? 0 : this.processes.size();
  }

  public void putToProcesses(String key, String val) {
    if (this.processes == null) {
      this.processes = new HashMap<String,String>();
    }
    this.processes.put(key, val);
  }

  public Map<String,String> getProcesses() {
    return this.processes;
  }

  public HeartbeatRequest setProcesses(Map<String,String> processes) {
    this.processes = processes;
    return this;
  }

  public void unsetProcesses() {
    this.processes = null;
  }

  /** Returns true if field processes is set (has been assigned a value) and false otherwise */
  public boolean isSetProcesses() {
    return this.processes != null;
  }

  public void setProcessesIsSet(boolean value) {
    if (!value) {
      this.processes = null;
    }
  }

  public int getMounted_avail_spaceSize() {
    return (this.mounted_avail_space == null) ? 0 : this.mounted_avail_space.size();
  }

  public void putToMounted_avail_space(String key, long val) {
    if (this.mounted_avail_space == null) {
      this.mounted_avail_space = new HashMap<String,Long>();
    }
    this.mounted_avail_space.put(key, val);
  }

  public Map<String,Long> getMounted_avail_space() {
    return this.mounted_avail_space;
  }

  public HeartbeatRequest setMounted_avail_space(Map<String,Long> mounted_avail_space) {
    this.mounted_avail_space = mounted_avail_space;
    return this;
  }

  public void unsetMounted_avail_space() {
    this.mounted_avail_space = null;
  }

  /** Returns true if field mounted_avail_space is set (has been assigned a value) and false otherwise */
  public boolean isSetMounted_avail_space() {
    return this.mounted_avail_space != null;
  }

  public void setMounted_avail_spaceIsSet(boolean value) {
    if (!value) {
      this.mounted_avail_space = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHost_name();
      } else {
        setHost_name((String)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIp_address();
      } else {
        setIp_address((String)value);
      }
      break;

    case TOTAL_CPU:
      if (value == null) {
        unsetTotal_cpu();
      } else {
        setTotal_cpu((Double)value);
      }
      break;

    case MEMORY_USAGE:
      if (value == null) {
        unsetMemory_usage();
      } else {
        setMemory_usage((Double)value);
      }
      break;

    case PROCESSES:
      if (value == null) {
        unsetProcesses();
      } else {
        setProcesses((Map<String,String>)value);
      }
      break;

    case MOUNTED_AVAIL_SPACE:
      if (value == null) {
        unsetMounted_avail_space();
      } else {
        setMounted_avail_space((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case HOST_NAME:
      return getHost_name();

    case IP_ADDRESS:
      return getIp_address();

    case TOTAL_CPU:
      return getTotal_cpu();

    case MEMORY_USAGE:
      return getMemory_usage();

    case PROCESSES:
      return getProcesses();

    case MOUNTED_AVAIL_SPACE:
      return getMounted_avail_space();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case HOST_NAME:
      return isSetHost_name();
    case IP_ADDRESS:
      return isSetIp_address();
    case TOTAL_CPU:
      return isSetTotal_cpu();
    case MEMORY_USAGE:
      return isSetMemory_usage();
    case PROCESSES:
      return isSetProcesses();
    case MOUNTED_AVAIL_SPACE:
      return isSetMounted_avail_space();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HeartbeatRequest)
      return this.equals((HeartbeatRequest)that);
    return false;
  }

  public boolean equals(HeartbeatRequest that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_host_name = true && this.isSetHost_name();
    boolean that_present_host_name = true && that.isSetHost_name();
    if (this_present_host_name || that_present_host_name) {
      if (!(this_present_host_name && that_present_host_name))
        return false;
      if (!this.host_name.equals(that.host_name))
        return false;
    }

    boolean this_present_ip_address = true && this.isSetIp_address();
    boolean that_present_ip_address = true && that.isSetIp_address();
    if (this_present_ip_address || that_present_ip_address) {
      if (!(this_present_ip_address && that_present_ip_address))
        return false;
      if (!this.ip_address.equals(that.ip_address))
        return false;
    }

    boolean this_present_total_cpu = true;
    boolean that_present_total_cpu = true;
    if (this_present_total_cpu || that_present_total_cpu) {
      if (!(this_present_total_cpu && that_present_total_cpu))
        return false;
      if (this.total_cpu != that.total_cpu)
        return false;
    }

    boolean this_present_memory_usage = true;
    boolean that_present_memory_usage = true;
    if (this_present_memory_usage || that_present_memory_usage) {
      if (!(this_present_memory_usage && that_present_memory_usage))
        return false;
      if (this.memory_usage != that.memory_usage)
        return false;
    }

    boolean this_present_processes = true && this.isSetProcesses();
    boolean that_present_processes = true && that.isSetProcesses();
    if (this_present_processes || that_present_processes) {
      if (!(this_present_processes && that_present_processes))
        return false;
      if (!this.processes.equals(that.processes))
        return false;
    }

    boolean this_present_mounted_avail_space = true && this.isSetMounted_avail_space();
    boolean that_present_mounted_avail_space = true && that.isSetMounted_avail_space();
    if (this_present_mounted_avail_space || that_present_mounted_avail_space) {
      if (!(this_present_mounted_avail_space && that_present_mounted_avail_space))
        return false;
      if (!this.mounted_avail_space.equals(that.mounted_avail_space))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_host_name = true && (isSetHost_name());
    list.add(present_host_name);
    if (present_host_name)
      list.add(host_name);

    boolean present_ip_address = true && (isSetIp_address());
    list.add(present_ip_address);
    if (present_ip_address)
      list.add(ip_address);

    boolean present_total_cpu = true;
    list.add(present_total_cpu);
    if (present_total_cpu)
      list.add(total_cpu);

    boolean present_memory_usage = true;
    list.add(present_memory_usage);
    if (present_memory_usage)
      list.add(memory_usage);

    boolean present_processes = true && (isSetProcesses());
    list.add(present_processes);
    if (present_processes)
      list.add(processes);

    boolean present_mounted_avail_space = true && (isSetMounted_avail_space());
    list.add(present_mounted_avail_space);
    if (present_mounted_avail_space)
      list.add(mounted_avail_space);

    return list.hashCode();
  }

  @Override
  public int compareTo(HeartbeatRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost_name()).compareTo(other.isSetHost_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_name, other.host_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp_address()).compareTo(other.isSetIp_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip_address, other.ip_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_cpu()).compareTo(other.isSetTotal_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_cpu, other.total_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemory_usage()).compareTo(other.isSetMemory_usage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_usage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_usage, other.memory_usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcesses()).compareTo(other.isSetProcesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processes, other.processes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMounted_avail_space()).compareTo(other.isSetMounted_avail_space());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMounted_avail_space()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mounted_avail_space, other.mounted_avail_space);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HeartbeatRequest(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("host_name:");
    if (this.host_name == null) {
      sb.append("null");
    } else {
      sb.append(this.host_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip_address:");
    if (this.ip_address == null) {
      sb.append("null");
    } else {
      sb.append(this.ip_address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_cpu:");
    sb.append(this.total_cpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory_usage:");
    sb.append(this.memory_usage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processes:");
    if (this.processes == null) {
      sb.append("null");
    } else {
      sb.append(this.processes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mounted_avail_space:");
    if (this.mounted_avail_space == null) {
      sb.append("null");
    } else {
      sb.append(this.mounted_avail_space);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeartbeatRequestStandardSchemeFactory implements SchemeFactory {
    public HeartbeatRequestStandardScheme getScheme() {
      return new HeartbeatRequestStandardScheme();
    }
  }

  private static class HeartbeatRequestStandardScheme extends StandardScheme<HeartbeatRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HeartbeatRequest struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host_name = iprot.readString();
              struct.setHost_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip_address = iprot.readString();
              struct.setIp_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_cpu = iprot.readDouble();
              struct.setTotal_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEMORY_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.memory_usage = iprot.readDouble();
              struct.setMemory_usageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROCESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.processes = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.processes.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setProcessesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOUNTED_AVAIL_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.mounted_avail_space = new HashMap<String,Long>(2*_map4.size);
                String _key5;
                long _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readI64();
                  struct.mounted_avail_space.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setMounted_avail_spaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HeartbeatRequest struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.host_name != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.host_name);
        oprot.writeFieldEnd();
      }
      if (struct.ip_address != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ip_address);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_CPU_FIELD_DESC);
      oprot.writeDouble(struct.total_cpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_USAGE_FIELD_DESC);
      oprot.writeDouble(struct.memory_usage);
      oprot.writeFieldEnd();
      if (struct.processes != null) {
        oprot.writeFieldBegin(PROCESSES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.processes.size()));
          for (Map.Entry<String, String> _iter8 : struct.processes.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeString(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mounted_avail_space != null) {
        oprot.writeFieldBegin(MOUNTED_AVAIL_SPACE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.mounted_avail_space.size()));
          for (Map.Entry<String, Long> _iter9 : struct.mounted_avail_space.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeI64(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeartbeatRequestTupleSchemeFactory implements SchemeFactory {
    public HeartbeatRequestTupleScheme getScheme() {
      return new HeartbeatRequestTupleScheme();
    }
  }

  private static class HeartbeatRequestTupleScheme extends TupleScheme<HeartbeatRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HeartbeatRequest struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetHost_name()) {
        optionals.set(1);
      }
      if (struct.isSetIp_address()) {
        optionals.set(2);
      }
      if (struct.isSetTotal_cpu()) {
        optionals.set(3);
      }
      if (struct.isSetMemory_usage()) {
        optionals.set(4);
      }
      if (struct.isSetProcesses()) {
        optionals.set(5);
      }
      if (struct.isSetMounted_avail_space()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetHost_name()) {
        oprot.writeString(struct.host_name);
      }
      if (struct.isSetIp_address()) {
        oprot.writeString(struct.ip_address);
      }
      if (struct.isSetTotal_cpu()) {
        oprot.writeDouble(struct.total_cpu);
      }
      if (struct.isSetMemory_usage()) {
        oprot.writeDouble(struct.memory_usage);
      }
      if (struct.isSetProcesses()) {
        {
          oprot.writeI32(struct.processes.size());
          for (Map.Entry<String, String> _iter10 : struct.processes.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetMounted_avail_space()) {
        {
          oprot.writeI32(struct.mounted_avail_space.size());
          for (Map.Entry<String, Long> _iter11 : struct.mounted_avail_space.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeI64(_iter11.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HeartbeatRequest struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.host_name = iprot.readString();
        struct.setHost_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ip_address = iprot.readString();
        struct.setIp_addressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.total_cpu = iprot.readDouble();
        struct.setTotal_cpuIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memory_usage = iprot.readDouble();
        struct.setMemory_usageIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.processes = new HashMap<String,String>(2*_map12.size);
          String _key13;
          String _val14;
          for (int _i15 = 0; _i15 < _map12.size; ++_i15)
          {
            _key13 = iprot.readString();
            _val14 = iprot.readString();
            struct.processes.put(_key13, _val14);
          }
        }
        struct.setProcessesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mounted_avail_space = new HashMap<String,Long>(2*_map16.size);
          String _key17;
          long _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readI64();
            struct.mounted_avail_space.put(_key17, _val18);
          }
        }
        struct.setMounted_avail_spaceIsSet(true);
      }
    }
  }

}

