/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.grandland.glits.ms.protocol;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HeartbeatRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HeartbeatRequest\",\"namespace\":\"com.grandland.glits.ms.protocol\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"host_name\",\"type\":\"string\"},{\"name\":\"total_cpu\",\"type\":\"double\"},{\"name\":\"memory_usage\",\"type\":\"double\"},{\"name\":\"processes\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"mounted_avail_space\",\"type\":{\"type\":\"map\",\"values\":\"long\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int version;
  @Deprecated public CharSequence host_name;
  @Deprecated public double total_cpu;
  @Deprecated public double memory_usage;
  @Deprecated public java.util.Map<CharSequence,CharSequence> processes;
  @Deprecated public java.util.Map<CharSequence,Long> mounted_avail_space;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public HeartbeatRequest() {}

  /**
   * All-args constructor.
   */
  public HeartbeatRequest(Integer version, CharSequence host_name, Double total_cpu, Double memory_usage, java.util.Map<CharSequence,CharSequence> processes, java.util.Map<CharSequence,Long> mounted_avail_space) {
    this.version = version;
    this.host_name = host_name;
    this.total_cpu = total_cpu;
    this.memory_usage = memory_usage;
    this.processes = processes;
    this.mounted_avail_space = mounted_avail_space;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return version;
    case 1: return host_name;
    case 2: return total_cpu;
    case 3: return memory_usage;
    case 4: return processes;
    case 5: return mounted_avail_space;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: version = (Integer)value$; break;
    case 1: host_name = (CharSequence)value$; break;
    case 2: total_cpu = (Double)value$; break;
    case 3: memory_usage = (Double)value$; break;
    case 4: processes = (java.util.Map<CharSequence,CharSequence>)value$; break;
    case 5: mounted_avail_space = (java.util.Map<CharSequence,Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'version' field.
   */
  public Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'host_name' field.
   */
  public CharSequence getHostName() {
    return host_name;
  }

  /**
   * Sets the value of the 'host_name' field.
   * @param value the value to set.
   */
  public void setHostName(CharSequence value) {
    this.host_name = value;
  }

  /**
   * Gets the value of the 'total_cpu' field.
   */
  public Double getTotalCpu() {
    return total_cpu;
  }

  /**
   * Sets the value of the 'total_cpu' field.
   * @param value the value to set.
   */
  public void setTotalCpu(Double value) {
    this.total_cpu = value;
  }

  /**
   * Gets the value of the 'memory_usage' field.
   */
  public Double getMemoryUsage() {
    return memory_usage;
  }

  /**
   * Sets the value of the 'memory_usage' field.
   * @param value the value to set.
   */
  public void setMemoryUsage(Double value) {
    this.memory_usage = value;
  }

  /**
   * Gets the value of the 'processes' field.
   */
  public java.util.Map<CharSequence,CharSequence> getProcesses() {
    return processes;
  }

  /**
   * Sets the value of the 'processes' field.
   * @param value the value to set.
   */
  public void setProcesses(java.util.Map<CharSequence,CharSequence> value) {
    this.processes = value;
  }

  /**
   * Gets the value of the 'mounted_avail_space' field.
   */
  public java.util.Map<CharSequence,Long> getMountedAvailSpace() {
    return mounted_avail_space;
  }

  /**
   * Sets the value of the 'mounted_avail_space' field.
   * @param value the value to set.
   */
  public void setMountedAvailSpace(java.util.Map<CharSequence,Long> value) {
    this.mounted_avail_space = value;
  }

  /** Creates a new HeartbeatRequest RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new HeartbeatRequest RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new HeartbeatRequest RecordBuilder by copying an existing HeartbeatRequest instance */
  public static Builder newBuilder(HeartbeatRequest other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for HeartbeatRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HeartbeatRequest>
    implements org.apache.avro.data.RecordBuilder<HeartbeatRequest> {

    private int version;
    private CharSequence host_name;
    private double total_cpu;
    private double memory_usage;
    private java.util.Map<CharSequence,CharSequence> processes;
    private java.util.Map<CharSequence,Long> mounted_avail_space;

    /** Creates a new Builder */
    private Builder() {
      super(HeartbeatRequest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host_name)) {
        this.host_name = data().deepCopy(fields()[1].schema(), other.host_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total_cpu)) {
        this.total_cpu = data().deepCopy(fields()[2].schema(), other.total_cpu);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.memory_usage)) {
        this.memory_usage = data().deepCopy(fields()[3].schema(), other.memory_usage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processes)) {
        this.processes = data().deepCopy(fields()[4].schema(), other.processes);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mounted_avail_space)) {
        this.mounted_avail_space = data().deepCopy(fields()[5].schema(), other.mounted_avail_space);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing HeartbeatRequest instance */
    private Builder(HeartbeatRequest other) {
            super(HeartbeatRequest.SCHEMA$);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host_name)) {
        this.host_name = data().deepCopy(fields()[1].schema(), other.host_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total_cpu)) {
        this.total_cpu = data().deepCopy(fields()[2].schema(), other.total_cpu);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.memory_usage)) {
        this.memory_usage = data().deepCopy(fields()[3].schema(), other.memory_usage);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processes)) {
        this.processes = data().deepCopy(fields()[4].schema(), other.processes);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.mounted_avail_space)) {
        this.mounted_avail_space = data().deepCopy(fields()[5].schema(), other.mounted_avail_space);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'version' field */
    public Integer getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public Builder setVersion(int value) {
      validate(fields()[0], value);
      this.version = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'version' field */
    public Builder clearVersion() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'host_name' field */
    public CharSequence getHostName() {
      return host_name;
    }
    
    /** Sets the value of the 'host_name' field */
    public Builder setHostName(CharSequence value) {
      validate(fields()[1], value);
      this.host_name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'host_name' field has been set */
    public boolean hasHostName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'host_name' field */
    public Builder clearHostName() {
      host_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'total_cpu' field */
    public Double getTotalCpu() {
      return total_cpu;
    }
    
    /** Sets the value of the 'total_cpu' field */
    public Builder setTotalCpu(double value) {
      validate(fields()[2], value);
      this.total_cpu = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'total_cpu' field has been set */
    public boolean hasTotalCpu() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'total_cpu' field */
    public Builder clearTotalCpu() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'memory_usage' field */
    public Double getMemoryUsage() {
      return memory_usage;
    }
    
    /** Sets the value of the 'memory_usage' field */
    public Builder setMemoryUsage(double value) {
      validate(fields()[3], value);
      this.memory_usage = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'memory_usage' field has been set */
    public boolean hasMemoryUsage() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'memory_usage' field */
    public Builder clearMemoryUsage() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'processes' field */
    public java.util.Map<CharSequence,CharSequence> getProcesses() {
      return processes;
    }
    
    /** Sets the value of the 'processes' field */
    public Builder setProcesses(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[4], value);
      this.processes = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'processes' field has been set */
    public boolean hasProcesses() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'processes' field */
    public Builder clearProcesses() {
      processes = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'mounted_avail_space' field */
    public java.util.Map<CharSequence,Long> getMountedAvailSpace() {
      return mounted_avail_space;
    }
    
    /** Sets the value of the 'mounted_avail_space' field */
    public Builder setMountedAvailSpace(java.util.Map<CharSequence,Long> value) {
      validate(fields()[5], value);
      this.mounted_avail_space = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'mounted_avail_space' field has been set */
    public boolean hasMountedAvailSpace() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'mounted_avail_space' field */
    public Builder clearMountedAvailSpace() {
      mounted_avail_space = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public HeartbeatRequest build() {
      try {
        HeartbeatRequest record = new HeartbeatRequest();
        record.version = fieldSetFlags()[0] ? this.version : (Integer) defaultValue(fields()[0]);
        record.host_name = fieldSetFlags()[1] ? this.host_name : (CharSequence) defaultValue(fields()[1]);
        record.total_cpu = fieldSetFlags()[2] ? this.total_cpu : (Double) defaultValue(fields()[2]);
        record.memory_usage = fieldSetFlags()[3] ? this.memory_usage : (Double) defaultValue(fields()[3]);
        record.processes = fieldSetFlags()[4] ? this.processes : (java.util.Map<CharSequence,CharSequence>) defaultValue(fields()[4]);
        record.mounted_avail_space = fieldSetFlags()[5] ? this.mounted_avail_space : (java.util.Map<CharSequence,Long>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
